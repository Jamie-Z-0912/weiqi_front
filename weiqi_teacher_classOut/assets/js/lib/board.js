/**
 * 面板
 */
const Position = {
    data : []
};
const _textArr = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S'];
const _numberArr = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19'];
const noDropClsName = 'cls-noDrop';
const _boardParams = {
    //9×9
    sz9 : {
        size : 9,
        //网格线
        lines : ["31.63,32.57,332.74,32.57", "32.54,294.45,331.83,294.45", "32.54,257.04,331.83,257.04", "32.54,219.63,331.83,219.63", "32.54,182.22,331.83,182.22", "32.54,144.8,331.83,144.8", "32.54,107.39,331.83,107.39", "32.54,69.98,331.83,69.98", "32.54,331.86,331.83,331.86", "32.54,32.57,32.54,332.78", "294.42,32.57,294.42,331.86", "257,32.57,257,331.86", "219.59,32.57,219.59,331.86", "182.18,32.57,182.18,331.86", "144.77,32.57,144.77,331.86", "107.36,32.57,107.36,331.86", "69.95,32.57,69.95,331.86", "331.83,32.57,331.83,332.77"],
        boxLineStyle : function(_line, v){
            if("31.63,32.57,332.74,32.57" == v || "32.54,331.86,331.83,331.86" == v || "32.54,32.57,32.54,332.78" == v || "331.83,32.57,331.83,332.77" == v){
                _line.addClass('cls-0');
            }else{
                _line.addClass('cls-1');
            }
        },
        //阵 点
        battle : ["107.36,107.39,2.43", "257,107.32,2.43", "107.36,257.04,2.43", "257,257.04,2.43"],
        //文字
        textArray : {
            textTop : ["28.76 7.77","66.57 7.77","104.37 7.77","142.18 7.77","179.98 7.77","217.79 7.77","255.59 7.77","293.4 7.77","331.2 7.77"],
            textBottom : ["28.76 364.78","66.57 364.78","104.37 364.78","142.18 364.78","179.98 364.78","217.79 364.78","255.59 364.78","293.4 364.78","331.2 364.78"],
            numberLeft : ["0.9 335.12","0 297.73","0 260.34","0 222.95","0 185.56","0 148.16","0.24 110.77","0 73.38","0 35.99"],
            numberRight : ["363.48 335.12","362.58 297.73","362.58 260.34","362.58 222.95","362.58 185.56","362.58 148.16","362.82 110.77","362.58 73.38","362.58 35.99"]
        },
        //棋子 手柄
        circle : ["32.68,32.75,18.5","70.09,32.75,18.5","107.5,32.75,18.5","144.92,32.75,18.5","182.33,32.75,18.5","219.74,32.75,18.5","257.15,32.75,18.5","294.56,32.75,18.5","331.97,32.75,18.5","32.68,70.16,18.5","70.09,70.16,18.5","107.5,70.16,18.5","144.92,70.16,18.5","182.33,70.16,18.5","219.74,70.16,18.5","257.15,70.16,18.5","294.56,70.16,18.5","331.97,70.16,18.5","32.68,107.5,18.5","70.09,107.5,18.5","107.5,107.5,18.5","144.92,107.5,18.5","182.33,107.5,18.5","219.74,107.5,18.5","257.15,107.5,18.5","294.56,107.5,18.5","331.97,107.5,18.5","32.68,145.02,18.5","70.09,145.02,18.5","107.5,145.02,18.5","144.92,145.02,18.5","182.33,145.02,18.5","219.74,145.02,18.5","257.15,145.02,18.5","294.56,145.02,18.5","331.97,145.02,18.5","32.68,182.43,18.5","70.09,182.43,18.5","107.5,182.43,18.5","144.92,182.43,18.5","182.33,182.43,18.5","219.74,182.43,18.5","257.15,182.43,18.5","294.56,182.43,18.5","331.97,182.43,18.5","32.68,219.77,18.5","70.09,219.77,18.5","107.5,219.77,18.5","144.92,219.77,18.5","182.33,219.77,18.5","219.74,219.77,18.5","257.15,219.77,18.5","294.56,219.77,18.5","331.97,219.77,18.5","32.68,257.26,18.5","70.09,257.26,18.5","107.5,257.26,18.5","144.92,257.26,18.5","182.33,257.26,18.5","219.74,257.26,18.5","257.15,257.26,18.5","294.56,257.26,18.5","331.97,257.26,18.5","32.68,294.67,18.5","70.09,294.67,18.5","107.5,294.67,18.5","144.92,294.67,18.5","182.33,294.67,18.5","219.74,294.67,18.5","257.15,294.67,18.5","294.56,294.67,18.5","331.97,294.67,18.5","32.68,332.01,18.5","70.09,332.01,18.5","107.5,332.01,18.5","144.92,332.01,18.5","182.33,332.01,18.5","219.74,332.01,18.5","257.15,332.01,18.5","294.56,332.01,18.5","331.97,332.01,18.5"]
    },
    //19×19
    sz19 : {
        size : 19,
        //网格线
        lines : ["20.49,19.58,347.4,19.58", "20.49,328.33,347.4,328.33", "20.49,310.17,347.4,310.17", "20.49,292.01,347.4,292.01", "20.49,273.84,347.4,273.84", "20.49,255.68,347.4,255.68", "20.49,237.52,347.4,237.52", "20.49,219.36,347.4,219.36", "20.49,201.2,347.4,201.2", "20.49,183.03,347.4,183.03", "20.49,164.87,347.4,164.87", "20.49,146.71,347.4,146.71", "20.49,128.55,347.4,128.55", "20.49,110.39,347.4,110.39", "20.49,92.23,347.4,92.23", "20.49,74.06,347.4,74.06", "20.49,55.9,347.4,55.9", "20.49,37.74,347.4,37.74", "20.49,346.49,347.4,346.49", "20.49,19.58,20.49,346.49", "329.24,19.58,329.24,346.49", "311.08,19.58,311.08,346.49", "292.92,19.58,292.92,346.49", "274.76,19.58,274.76,346.49", "256.59,19.58,256.59,346.49", "238.43,19.58,238.43,346.49", "220.27,19.58,220.27,346.49", "202.11,19.58,202.11,346.49", "183.95,19.58,183.95,346.49", "165.78,19.58,165.78,346.49", "147.62,19.58,147.62,346.49", "129.46,19.58,129.46,346.49", "111.3,19.58,111.3,346.49", "93.14,19.58,93.14,346.49", "74.97,19.58,74.97,346.49", "56.81,19.58,56.81,346.49", "38.65,19.58,38.65,346.49", "347.4,19.58,347.4,346.49"],
        boxLineStyle : function(_line, v){
            if("20.49,19.58,347.4,19.58" == v || "20.49,346.49,347.4,346.49" == v || "20.49,19.58,20.49,346.49" == v || "347.4,19.58,347.4,346.49" == v){
                _line.addClass('cls-0');
            }else{
                _line.addClass('cls-1');
            }
        },
        //阵 点
        battle : ["74.97,74.06,2.65", "183.95,74.06,2.65", "292.92,74.06,2.65", "74.97,183.03,2.65", "183.95,183.03,2.65", "292.92,183.03,2.65", "74.97,292.01,2.65", "183.95,292.01,2.65", "292.92,292.01,2.65"],
        //文字
        textArray : {
            textTop : ["17.67 7.77","35.66 7.77","53.5 7.77","72.04 7.77","90.43 7.77","108.77 7.77","126.07 7.77","144.27 7.77","164.52 7.77","181.7 7.77","198.99 7.77","217.53 7.77","234.27 7.77","253.08 7.77","270.93 7.77","289.94 7.77","307.45 7.77","325.93 7.77","344.2 7.77"],
            textBottom : ["17.67 364.78","35.66 364.78","53.5 364.78","72.04 364.78","90.43 364.78","108.77 364.78","126.07 364.78","144.27 364.78","164.52 364.78","181.7 364.78","198.99 364.78","217.53 364.78","234.27 364.78","253.08 364.78","270.93 364.78","289.94 364.78","307.45 364.78","325.93 364.78","344.2 364.78"],
            numberLeft : ["6.1 349.18","3.69 331.11","3.69 313.04","3.69 294.59","3.69 276.52","3.69 258.45","4.31 240.38","3.69 222.31","3.69 204.23","0 185.79","0.38 167.71","0.38 149.64","0 131.57","0 113.12","0 95.05","0 76.98","0.62 58.53","0 40.84","0.07 22.52"],
            numberRight : ["358.96 349.18","358.82 331.11","358.82 313.04","359.19 294.59","358.82 276.52","358.82 258.45","359.06 240.38","358.82 222.31","358.82 204.23","358.89 185.79","359.04 167.71","358.89 149.64","358.89 131.57","358.89 113.12","358.89 95.05","358.89 76.98","358.75 58.53","358.89 40.84","358.96 22.52"]
        },
        //棋子 手柄
        circle : ["20.56,19.75,9.01","38.72,19.84,9.01","56.88,19.84,9.01","75.04,19.75,9.01","93.21,19.84,9.01","111.37,19.84,9.01","129.53,19.75,9.01","147.69,19.84,9.01","165.85,19.84,9.01","184.01,19.75,9.01","202.18,19.84,9.01","220.34,19.84,9.01","238.5,19.84,9.01","256.66,19.75,9.01","274.83,19.84,9.01","292.99,19.84,9.01","311.15,19.75,9.01","329.31,19.84,9.01","347.47,19.84,9.01","20.56,37.78,9.01","38.72,37.87,9.01","56.88,37.87,9.01","75.04,37.78,9.01","93.21,37.87,9.01","111.37,37.87,9.01","129.53,37.78,9.01","147.69,37.87,9.01","165.85,37.87,9.01","184.01,37.78,9.01","202.18,37.87,9.01","220.34,37.87,9.01","238.5,37.87,9.01","256.66,37.78,9.01","274.83,37.87,9.01","292.99,37.87,9.01","311.15,37.78,9.01","329.31,37.87,9.01","347.47,37.87,9.01","20.56,55.98,9.01","38.72,56.07,9.01","56.88,56.07,9.01","75.04,55.98,9.01","93.21,56.07,9.01","111.37,56.07,9.01","129.53,55.98,9.01","147.69,56.07,9.01","165.85,56.07,9.01","184.01,55.98,9.01","202.18,56.07,9.01","220.34,56.07,9.01","238.5,56.07,9.01","256.66,55.98,9.01","274.83,56.07,9.01","292.99,56.07,9.01","311.15,55.98,9.01","329.31,56.07,9.01","347.47,56.07,9.01","20.56,74.01,9.01","38.72,74.1,9.01","56.88,74.1,9.01","75.04,74.01,9.01","93.21,74.1,9.01","111.37,74.1,9.01","129.53,74.01,9.01","147.69,74.1,9.01","165.85,74.1,9.01","184.01,74.01,9.01","202.18,74.1,9.01","220.34,74.1,9.01","238.5,74.1,9.01","256.66,74.01,9.01","274.83,74.1,9.01","292.99,74.1,9.01","311.15,74.01,9.01","329.31,74.1,9.01","347.47,74.1,9.01","20.56,92.29,9.01","38.72,92.38,9.01","56.88,92.38,9.01","75.04,92.29,9.01","93.21,92.38,9.01","111.37,92.38,9.01","129.53,92.29,9.01","147.69,92.38,9.01","165.85,92.38,9.01","184.01,92.29,9.01","202.18,92.38,9.01","220.34,92.38,9.01","238.5,92.38,9.01","256.66,92.29,9.01","274.83,92.38,9.01","292.99,92.38,9.01","311.15,92.29,9.01","329.31,92.38,9.01","347.47,92.38,9.01","20.56,110.32,9.01","38.72,110.41,9.01","56.88,110.41,9.01","75.04,110.32,9.01","93.21,110.41,9.01","111.37,110.41,9.01","129.53,110.32,9.01","147.69,110.41,9.01","165.85,110.41,9.01","184.01,110.32,9.01","202.18,110.41,9.01","220.34,110.41,9.01","238.5,110.41,9.01","256.66,110.32,9.01","274.83,110.41,9.01","292.99,110.41,9.01","311.15,110.32,9.01","329.31,110.41,9.01","347.47,110.41,9.01","20.56,128.52,9.01","38.72,128.61,9.01","56.88,128.61,9.01","75.04,128.52,9.01","93.21,128.61,9.01","111.37,128.61,9.01","129.53,128.52,9.01","147.69,128.61,9.01","165.85,128.61,9.01","184.01,128.52,9.01","202.18,128.61,9.01","220.34,128.61,9.01","238.5,128.61,9.01","256.66,128.52,9.01","274.83,128.61,9.01","292.99,128.61,9.01","311.15,128.52,9.01","329.31,128.61,9.01","347.47,128.61,9.01","20.56,146.55,9.01","38.72,146.64,9.01","56.88,146.64,9.01","75.04,146.55,9.01","93.21,146.64,9.01","111.37,146.64,9.01","129.53,146.55,9.01","147.69,146.64,9.01","165.85,146.64,9.01","184.01,146.55,9.01","202.18,146.64,9.01","220.34,146.64,9.01","238.5,146.64,9.01","256.66,146.55,9.01","274.83,146.64,9.01","292.99,146.64,9.01","311.15,146.55,9.01","329.31,146.64,9.01","347.47,146.64,9.01","20.56,164.58,9.01","38.72,164.67,9.01","56.88,164.67,9.01","75.04,164.58,9.01","93.21,164.67,9.01","111.37,164.67,9.01","129.53,164.58,9.01","147.69,164.67,9.01","165.85,164.67,9.01","184.01,164.58,9.01","202.18,164.67,9.01","220.34,164.67,9.01","238.5,164.67,9.01","256.66,164.58,9.01","274.83,164.67,9.01","292.99,164.67,9.01","311.15,164.58,9.01","329.31,164.67,9.01","347.47,164.67,9.01","20.56,182.61,9.01","38.72,182.7,9.01","56.88,182.7,9.01","75.04,182.61,9.01","93.21,182.7,9.01","111.37,182.7,9.01","129.53,182.61,9.01","147.69,182.7,9.01","165.85,182.7,9.01","184.01,182.61,9.01","202.18,182.7,9.01","220.34,182.7,9.01","238.5,182.7,9.01","256.66,182.61,9.01","274.83,182.7,9.01","292.99,182.7,9.01","311.15,182.61,9.01","329.31,182.7,9.01","347.47,182.7,9.01","20.56,200.8,9.01","38.72,200.89,9.01","56.88,200.89,9.01","75.04,200.8,9.01","93.21,200.89,9.01","111.37,200.89,9.01","129.53,200.8,9.01","147.69,200.89,9.01","165.85,200.89,9.01","184.01,200.8,9.01","202.18,200.89,9.01","220.34,200.89,9.01","238.5,200.89,9.01","256.66,200.8,9.01","274.83,200.89,9.01","292.99,200.89,9.01","311.15,200.8,9.01","329.31,200.89,9.01","347.47,200.89,9.01","20.56,218.83,9.01","38.72,218.92,9.01","56.88,218.92,9.01","75.04,218.83,9.01","93.21,218.92,9.01","111.37,218.92,9.01","129.53,218.83,9.01","147.69,218.92,9.01","165.85,218.92,9.01","184.01,218.83,9.01","202.18,218.92,9.01","220.34,218.92,9.01","238.5,218.92,9.01","256.66,218.83,9.01","274.83,218.92,9.01","292.99,218.92,9.01","311.15,218.83,9.01","329.31,218.92,9.01","347.47,218.92,9.01","20.56,237.12,9.01","38.72,237.21,9.01","56.88,237.21,9.01","75.04,237.12,9.01","93.21,237.21,9.01","111.37,237.21,9.01","129.53,237.12,9.01","147.69,237.21,9.01","165.85,237.21,9.01","184.01,237.12,9.01","202.18,237.21,9.01","220.34,237.21,9.01","238.5,237.21,9.01","256.66,237.12,9.01","274.83,237.21,9.01","292.99,237.21,9.01","311.15,237.12,9.01","329.31,237.21,9.01","347.47,237.21,9.01","20.56,255.15,9.01","38.72,255.23,9.01","56.88,255.23,9.01","75.04,255.15,9.01","93.21,255.23,9.01","111.37,255.23,9.01","129.53,255.15,9.01","147.69,255.23,9.01","165.85,255.23,9.01","184.01,255.15,9.01","202.18,255.23,9.01","220.34,255.23,9.01","238.5,255.23,9.01","256.66,255.15,9.01","274.83,255.23,9.01","292.99,255.23,9.01","311.15,255.15,9.01","329.31,255.23,9.01","347.47,255.23,9.01","20.56,273.34,9.01","38.72,273.43,9.01","56.88,273.43,9.01","75.04,273.34,9.01","93.21,273.43,9.01","111.37,273.43,9.01","129.53,273.34,9.01","147.69,273.43,9.01","165.85,273.43,9.01","184.01,273.34,9.01","202.18,273.43,9.01","220.34,273.43,9.01","238.5,273.43,9.01","256.66,273.34,9.01","274.83,273.43,9.01","292.99,273.43,9.01","311.15,273.34,9.01","329.31,273.43,9.01","347.47,273.43,9.01","20.56,291.37,9.01","38.72,291.46,9.01","56.88,291.46,9.01","75.04,291.37,9.01","93.21,291.46,9.01","111.37,291.46,9.01","129.53,291.37,9.01","147.69,291.46,9.01","165.85,291.46,9.01","184.01,291.37,9.01","202.18,291.46,9.01","220.34,291.46,9.01","238.5,291.46,9.01","256.66,291.37,9.01","274.83,291.46,9.01","292.99,291.46,9.01","311.15,291.37,9.01","329.31,291.46,9.01","347.47,291.46,9.01","20.56,309.57,9.01","38.72,309.66,9.01","56.88,309.66,9.01","75.04,309.57,9.01","93.21,309.66,9.01","111.37,309.66,9.01","129.53,309.57,9.01","147.69,309.66,9.01","165.85,309.66,9.01","184.01,309.57,9.01","202.18,309.66,9.01","220.34,309.66,9.01","238.5,309.66,9.01","256.66,309.57,9.01","274.83,309.66,9.01","292.99,309.66,9.01","311.15,309.57,9.01","329.31,309.66,9.01","347.47,309.66,9.01","20.56,327.76,9.01","38.72,327.85,9.01","56.88,327.85,9.01","75.04,327.76,9.01","93.21,327.85,9.01","111.37,327.85,9.01","129.53,327.76,9.01","147.69,327.85,9.01","165.85,327.85,9.01","184.01,327.76,9.01","202.18,327.85,9.01","220.34,327.85,9.01","238.5,327.85,9.01","256.66,327.76,9.01","274.83,327.85,9.01","292.99,327.85,9.01","311.15,327.76,9.01","329.31,327.85,9.01","347.47,327.85,9.01","20.56,345.79,9.01","38.72,345.88,9.01","56.88,345.88,9.01","75.04,345.79,9.01","93.21,345.88,9.01","111.37,345.88,9.01","129.53,345.79,9.01","147.69,345.88,9.01","165.85,345.88,9.01","184.01,345.79,9.01","202.18,345.88,9.01","220.34,345.88,9.01","238.5,345.88,9.01","256.66,345.79,9.01","274.83,345.88,9.01","292.99,345.88,9.01","311.15,345.79,9.01","329.31,345.88,9.01","347.47,345.88,9.01"]
    }
};

/* - - - - - - - - - - - - - - - - - - - - - 棋盘 - - - - - - - - - - - - - - - - - - - - - */
//绘制网格
function drawNet(_this){
    let _style = _this.style.text('.cls-0{fill:none;stroke:#363433;stroke-width:2;stroke-miterlimit:10;} .cls-1 {fill: none;stroke: #363433;stroke-miterlimit: 10;stroke-width: 0.5px;}.cls-2 {fill: #363433;}.cls-3 {fill: #4c4c4c;}.cls-3, .cls-4 {isolation: isolate;}.cls-4 {font-size: 9.04px;font-family: PingFang-SC-Regular-B5pc-H, PingFang SC;}.cls-point{ cursor: pointer; }.' + noDropClsName + '{cursor: no-drop;}');
    let svg = _this.svg,
        _param = _this.param;

    $(svg.defs().node).append(_style);            //追加样式类

    //外边框
    //svg.path('M350.05,16.93V349.14H17.84V16.93H350.05m2-2H15.84V351.14H352.05V14.93Z');

    //容器
     _this._Group = svg.group().data('name', '容器');

    _this._cloneGroupBox = _this.svg.group().data('name', '克隆集');   //棋子，标记，文字 克隆对象存储容器
    _this._Group.put(_this._cloneGroupBox);                             //添加到父容器中

    //线 容器
    _this._lineGroup = _this._Group.put(svg.group().data('name', '网格'));
    drawLine(svg, _this._lineGroup, _param);

    //阵 点
    _this._posDotGroup = _this._Group.put(svg.group().data('name', '阵点'));
    drawCircle3(svg, _this._posDotGroup, _param);

    //字母及数字 标识
    _this._wordGroup = _this._Group.put(svg.group().data('name', '文字容器'));
    drawText(svg, _this._wordGroup, _param);

    _this._piecesGroup = _this._Group.put(svg.group().data('name', '棋子集'));    //棋子组
    _this._textGroup = _this._Group.put(svg.group().data('name', '手数集'));       //对弈手数
    _this._signGroup = _this._Group.put(svg.group().data('name', '标记集'));      //标记组

    //点击区域
    _this._pointGroup = _this._Group.put(svg.group().data('name', '编辑区域'));
    drawPoint(svg, _this._pointGroup, _param);
}

//棋谱 网格
function drawLine(svg, _group, _param){
    if($.isArray(_param['lines']))
    $.each(_param['lines'], function(i, v){
        let _line = svg.line(0, 0, 0, 0).stroke({'width' : 1}).plot(v);
        _param.boxLineStyle(_line, v);     //加粗边框线
        _group.add(_line);
    });
}

//棋谱 阵点
function drawCircle3(svg, _group, _param){
    if($.isArray(_param['battle']))
    $.each(_param['battle'], function(i, v){
        let _arr = v.split(',');
        let _circle = svg.circle().move(parseFloat(_arr[0]), parseFloat(_arr[1])).radius(parseFloat(_arr[2])).addClass('cls-3');
        _group.add(_circle);
    });
}

//棋谱 字母及数字 标识
function drawText(svg, _group, _param){
    const _text1Group = _group.put(svg.group().data('name', '文字 顶'));
    const _text2Group = _group.put(svg.group().data('name', '文字 底'));
    const _text3Group = _group.put(svg.group().data('name', '数字 左'));
    const _text4Group = _group.put(svg.group().data('name', '数字 右'));

    if('object' === typeof _param['textArray'])
    //创建四周字母和数字
    (function(createText){
        if($.isArray(_param['textArray']['textTop']))
        //_text1Group 字母 顶
        createText(_param['textArray']['textTop'], 'cls-4', _text1Group, _textArr);

        if($.isArray(_param['textArray']['textBottom']))
        //_text2Group 字母 底
        createText(_param['textArray']['textBottom'], 'cls-4', _text2Group, _textArr);

        if($.isArray(_param['textArray']['numberLeft']))
        //_text3Group 数字 左
        createText(_param['textArray']['numberLeft'], 'cls-4', _text3Group, _numberArr);

        if($.isArray(_param['textArray']['numberRight']))
        //_text4Group 数字 右
        createText(_param['textArray']['numberRight'], 'cls-4', _text4Group, _numberArr);

    })(function(_list, _className, _G, _T){         //_list 定位 _className 类名 _G 组容器 _T 显示内容
        $.each(_list, function(i, v){
            let _arr = v.split(' ');
            let _text = svg.plain(_T[i]).transform({x : _arr[0], y : parseFloat(_arr[1])}).font({
                'family' : ''
            }).addClass(_className);
            _G.add(_text);
        });
    });
}

/* - - - - - - - - - - - - - - - - - - - - - 点击区域 操作 - - - - - - - - - - - - - - - - - - - - - */
//点击区域状态 名称
const _areaStatus = {
    number : 'num',         //标识名称 手数
    chess : "chess",        //标识名称 棋子
    sign : "sign",          //标识名称 标记
    pos : "pos"             //标识名称 位置
};

//添加区域操作功能
function addOperate(_circle){
    _circle.data(_areaStatus.chess, null);
    _circle.data(_areaStatus.sign, null);

    //获取坐标 标识
    _circle.getPos = function(){
        return this.data(_areaStatus.pos);
    };
    //手数 添加值
    _circle.setNumber = function(_index){
        this.data(_areaStatus.number, _index);
    };
    //手数 获取值
    _circle.getNumber = function(){
        return this.data(_areaStatus.number);
    };
    //判断是否存在 手数
    _circle.hasNumber = function(){
        return 'undefined' !== typeof this.data(_areaStatus.number);
    };
    //手数 移除
    _circle.removeNumber = function(){
      this.data(_areaStatus.number, null);
    };
    //棋子 添加
    _circle.setChess = function(_id){
        this.data(_areaStatus.chess, _id);
    };
    //棋子 获取值
    _circle.getChess = function(){
        return { mark : this.data(_areaStatus.chess), pos : this.data(_areaStatus.pos) };
    };
    //棋子 移除
    _circle.removeChess = function(){
        this.data(_areaStatus.chess, null);
    };
    //棋子 判断是否存在
    _circle.hasChess = function(){
        return 'undefined' !== typeof this.data(_areaStatus.chess);
    };
    //标识 添加
    _circle.setSign = function(_id){
        this.data(_areaStatus.sign, _id);
    };
    //标识 获取值
    _circle.getSign = function(){
        return { mark : this.data(_areaStatus.sign), pos : this.data(_areaStatus.pos)};
    };
    //标识 移除
    _circle.removeSign = function(){
        this.data(_areaStatus.sign, null);
    };
    //标识 判断是否存在
    _circle.hasSign = function(){
        return 'undefined' !== typeof this.data(_areaStatus.sign);
    };

    //状态 添加不可点击
    _circle.setDisabled = function(){
        this.addClass(noDropClsName);
    };
    //状态 移出不可点击
    _circle.removeDisabled = function(){
        this.removeClass(noDropClsName);
    }
}

//点击区域
function drawPoint(svg, _group, _param){
    let index = 0,
        num = 0;
    if($.isArray(_param['circle']))
    $.each(_param['circle'], function(i, v){
        let _arr = v.split(',');
        let _x = parseFloat(_arr[0]);
        let _y = parseFloat(_arr[1]);
        let _circle = _group.put(svg.circle().move(_x, _y).radius(parseFloat(_arr[2])).fill({ color: '#000', opacity: 0 }).addClass('cls-point'));
        let _pos = {
            "circle" : _circle,                                             //svg 圆节点
            "position" : _textArr[num++] +　'' + _textArr[index],         //矩阵 坐标
            //"info" : {x : num, y : index + 1},                          //坐标信息
            "info" : {x : num - 1, y : index},                          //坐标信息
            "x" : _x,
            "y" : _y
        };
        _circle.data('pos', _pos.position);         //添加坐标 标识
        //添加操作事件
        addOperate(_circle);
        //svg.plain(_pos.position).transform({x : _x, y : _y}).font({size : '8px'}).fill('#ffffff');

        if(num == _param['size']){
            num = 0;
            index++;
        }
        Position.data[i] = _pos;
    });
}

/* - - - - - - - - - - - - - - - - - - - - - 棋盘类 - - - - - - - - - - - - - - - - - - - - - */
//棋盘类
class Board{
    //构造函数
    constructor(id, size){
        this.id = id;
        this.svg = SVG(id).viewbox('0 0 368 367.36');
        this.defs = this.svg.defs();
        this.param =  9 == size ? _boardParams.sz9 : _boardParams.sz19;                 //棋盘大小，默认为19
        this.style =  $('<style />').attr('type', 'text/css');
    }

    /**
     * 初台化数据
     * @returns {Board}
     */
    initial(){ drawNet(this); return this; }

    /**
     * 添加棋子
     * @param _pieces
     */
    setPieces(_pieces){ this._piecesGroup.add(_pieces); }

    /**
     * 获取点击区域
     * @param _pos
     * @returns {*}
     */
    getCircle(_pos){
        for(var i = 0; i < Position.data.length; i++){
            if(Position.data[i].position == _pos){
                return Position.data[i];
            }
        }
        return null;
    }

    /**
     * 获取 坐标 标识
     * @param param
     */
    getPosition(param){
        if('object' !== typeof param) return null;
        for(var i = 0, _pos = Position.data; i < _pos.length; i++){
            if(param.x == _pos[i].info.x && param.y == _pos[i].info.y){
                return _pos[i];
            }
        }
        return null;
    }

    /**
     * 删除指定棋子
     * @param _pos      定位标识
     * @param _circle   点击区域 typeof object 为对象则 直接通过 区域节点清除
     *                            typeof undefined 通过标识查询区域节点 清除
     */
    clearPieces(_pos, _circle){
        $(this._piecesGroup.node).find('[data-pos='+_pos+']').remove();
        //删除点击区域 棋子标识
        if('object' !== typeof _circle){
            _circle = this.getCircle(_pos).circle;
        }
        _circle.removeChess();
    }

    /**
     * 清除所有棋子
     */
    clearAllPieces(){ this._piecesGroup.clear(); }

    /**
     * 添加标记
     * @param _pieces
     */
    setSign(_pieces){ this._signGroup.add(_pieces); }

    /**
     * 清除指定棋子
     * @param _pos          定位标识
     * @param _circle       点击区域 typeof object 为对象则 直接通过 区域节点清除
     *                            typeof undefined 通过标识查询区域节点 清除
     */
    clearSign(_pos, _circle){
        $(this._signGroup.node).find('[data-pos='+_pos+']').remove();
        //删除点击区域 标记标识
        if('object' !== typeof _circle){
            _circle = this.getCircle(_pos).circle;
        }
        _circle.removeSign();
    }

    /**
     * 清除所有标记
     */
    clearAllSign(){
        var _this = this;
        $.each(this._signGroup.children(), function(i, item){
            _this.clearSign(item.data('pos'), _this.getCircle(item.data('pos')).circle);
        });

        //this._signGroup.clear();
    }

    /**
     * 清除 手数
     * @param _pos
     * @param _circle
     */
    clearNumber(_pos, _circle){
        $(this._textGroup.node).find('[data-pos='+_pos+']').remove();
        //删除点击区域 手数标识
        if('object' !== typeof _circle){
            _circle = this.getCircle(_pos).circle;
        }
        _circle.removeNumber();
    }
}

/**
 * 导出数据集
 */
export {Board, Position};